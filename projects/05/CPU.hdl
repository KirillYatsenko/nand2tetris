// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	/* A register */
	Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);

	Not(in=instruction[15], out=aInstr);
	Or(a=aInstr, b=instruction[5], out=aLoad);
	ARegister(in=aIn, load=aLoad, out=regA, out[0..14]=addressM);

	/* D register */
	And(a=instruction[15], b=instruction[4], out=dLoad);
	DRegister(in=aluOut, load=dLoad, out=regD);

	/* writeM */
	And(a=instruction[15], b=instruction[3], out=writeM);

	/* ALU */
	Mux16(a=regA, b=inM, sel=instruction[12], out=aMuxM);

	ALU(x=regD, y=aMuxM, zx=instruction[11], nx=instruction[10],
	    zy=instruction[9], ny=instruction[8], f=instruction[7],
	    no=instruction[6], out=aluOut, out=outM, zr=aluZr, ng=aluNg);

	/* JMP */
	Not(in=aluZr, out=jne); 	/* alu != 0 */
	Not(in=aluNg, out=jge); 	/* alu >= 0 */
	And(a=jne, b=jge, out=jgt); 	/* alu >  0 */
	Not(in=jgt, out=jle);		/* alu <= 0 */

	Mux8Way16(a=false, b[0]=jgt, c[0]=aluZr, d[0]=jge, e[0]=aluNg, f[0]=jne,
		  g[0]=jle, h[0]=true, sel=instruction[0..2], out[0]=muxJmp);

	And(a=muxJmp, b=instruction[15], out=jump);

	/* PC */
	Not(in=jump, out=notJump);
	PC(in=regA, load=jump, inc=notJump, reset=reset, out[0..14]=pc);
}
